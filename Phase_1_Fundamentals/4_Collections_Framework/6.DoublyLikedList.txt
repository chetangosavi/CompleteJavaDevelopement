Doubly LinkedList :
    - Moves forward as well as backward
    - Node Structure has [previous | value | next]


    + Building blocks of the list: nodes
        - At the core of a doubly linked list are nodes, the individual train carriages. Each node has the following:
        - Data: This is like the cargo or passengers in the train carriage that the node is carrying.
        - Next: A reference to the next node in the sequence, which is like the train carriage ahead.
        - Previous: A reference to the previous node, which is like the train carriage behind.


        private static class Node {
            int data;
            Node next;
            Node prev;

            // Constructor to create a new node
            Node(int data) {
                this.data = data;
                this.next = null;
                this.prev = null;
            }
        }
    - The integer variable data indicates that the node holds a whole number. The reference variable next of type Node 
      points to the next node, while prev points to the previous node.
    - The parameterized constructor in the Node class initializes a new node with the provided data and sets both next 
      and prev to null, as the new node is not yet linked to other nodes in the doubly-linked list.

    + The list structure: head and tail
        Using the train line analogy, the head is the first carriage, and the tail is the last carriage. When you first 
        create the list, both the head and tail are null because the train hasn't been assembled yet, and there are no 
        carriages on the track.

    + After adding some carriages to the train, the list would look as shown in the diagram below:

        [prev|data|next]<-->[prev|data|next]<-->[prev|data|next]<-->[prev|data|next]
            Head                                                         Tail

        --Starting from the head, you can move forward through the list by following the next pointers (next -->).
        --Starting from the tail, you can move backward through the list by following the prev pointers (  <-- prev).
    + Methods :
        + ADDING :
            add() - adds element into list
            addFirst() - add element at first/head position
            addlast() - add element at last/tail position
            add(index,value) -> add element at specific index

        + REMOVING :
            removeFirst() -> deletes the first step
            removeLast() -> deletes the last step.
            remove(element) -> removes a step from any specific position, helping you manage the recipe’s flow as you see fit.

    + The ListIterator provides several useful methods:

        - next(): Moves the iterator to the next element in the list and returns that element. The ListIterator 
          keeps track of its current position internally, so each call to next() automatically moves it forward 
          by one step. Since it changes the iterator's position, it’s essential to ensure a 'next' element is available.

        - hasNext(): Checks if there is an element ahead in the list, allowing you to move forward safely. Before 
          using the next() method, you should call hasNext(), which This method returns true if there are more elements 
          to traverse, and false if you've reached the end of the list.

        - previous(): Moves the iterator to the previous element and returns that element. The ListIterator keeps 
          track of its current position internally, so each call to previous() automatically moves it backward by 
          one step. Since it changes the iterator's position, it’s essential to ensure a 'previous' element is available.

        - hasPrevious(): Checks if there is an element behind the current position, enabling backward traversal. 
          If hasPrevious() returns true, you can safely use the previous() method to move the iterator backward 
          and access the previous element. 

    